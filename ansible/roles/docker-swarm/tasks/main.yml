---
# Setup Docker swarm nodes

# Inspired by https://thisendout.com/2016/09/13/deploying-docker-swarm-with-ansible/

# TODO: Docker uses an incorrect MTU on OpenStack VMs, and it is not possible
# to easily set it on the swarm ingress network. See this workround:
# https://github.com/docker/docker/issues/24906#issuecomment-235894478
# This must be done before creating the swarm
#     docker network rm docker_gwbridge
#     docker network create --opt com.docker.network.driver.mtu=1400 --subnet 172.18.0.0/16 docker_gwbridge


- name: docker swarm | check active
  become: yes
  shell: "docker info 2> /dev/null | sed -n 's/^Swarm: //p'"
  always_run: yes
  ignore_errors: yes
  register: docker_swarm_active
  changed_when: docker_swarm_active.stdout != 'active'

# TODO: Use docker_network when we switch to Ansible 2.2
- name: docker swarm | check mtu
  become: yes
  command: docker network inspect docker_gwbridge -f "{{ '{{' }} index .Options \"com.docker.network.driver.mtu\" {{ '}}' }}"
  always_run: yes
  #ignore_errors: yes
  register: docker_swarm_net_mtu
  when: docker_use_ipv4_nic_mtu
  #changed_when: "(docker_use_ipv4_nic_mtu | default(True)) and
  changed_when: docker_swarm_net_mtu.stdout != "{{ ansible_default_ipv4.mtu }}"
  failed_when: "(docker_swarm_net_mtu.rc != 0) and {{ not docker_swarm_net_mtu.stderr.endswith('No such network: docker_gwbridge') }}"

- name: docker swarm | network mtu delete docker_gwbridge
  become: yes
  command: docker network rm docker_gwbridge
  register: docker_swarm_net_rm
  failed_when: "(docker_swarm_net_rm.rc != 0) and {{ not docker_swarm_net_rm.stderr.endswith('network docker_gwbridge not found') }}"
  when: "{{ docker_swarm_net_mtu | changed }}"

# TODO: Make subnet configurable?
- name: docker swarm | network mtu create docker_gwbridge
  become: yes
  command: docker network create --opt com.docker.network.driver.mtu={{ ansible_default_ipv4.mtu }} --subnet 172.18.0.0/16 docker_gwbridge
  when: "{{ docker_swarm_net_mtu | changed }}"

- name: docker swarm | get manager ip
  set_fact:
    docker_swarm_manager_ip: "{{ ansible_default_ipv4.address }}"

- name: docker swarm | initialise
  become: yes
  command: docker swarm init --advertise-addr {{ docker_swarm_manager_ip }}
  when: docker_swarm_active.stdout != 'active'

- name: docker swarm | check docker swarm network
  become: yes
  command: docker network inspect "{{ item }}"
  always_run: yes
  register: docker_swarm_check_net
  changed_when: "docker_swarm_check_net.rc != 0"
  failed_when: "docker_swarm_check_net.rc > 1"
  with_items: "{{ docker_swarm_networks }}"

- name: docker swarm | create docker swarm network
  become: yes
  command: >
    docker network create --driver overlay "{{ item.item }}"
    (docker_use_ipv4_nic_mtu |
      ternary('--opt com.docker.network.driver.mtu=' + ansible_default_ipv4.mtu, ''))
  when: "{{ item | changed }}"
  with_items:
  - "{{ docker_swarm_check_net.results }}"

- name: docker swarm | get worker token
  become: yes
  command: docker swarm join-token worker -q
  register: docker_swarm_worker_token_out

- name: docker swarm | set worker token
  set_fact:
    docker_swarm_worker_token: "{{ docker_swarm_worker_token_out.stdout }}"



# WORKERS

- name: docker swarm | join worker
  become: yes
  command: docker swarm join --token {{ token }} {{ manager_ip }}
  when: docker_swarm_active.stdout != 'active'

  vars:
    token: "{{ hostvars[groups[idr_environment | default('idr') + '-a-dockermanager-hosts'][0]]['docker_swarm_worker_token'] }}"
    manager_ip: "{{ hostvars[groups[idr_environment | default('idr') + '-a-dockermanager-hosts'][0]]['docker_swarm_manager_ip'] }}"



# INIT
